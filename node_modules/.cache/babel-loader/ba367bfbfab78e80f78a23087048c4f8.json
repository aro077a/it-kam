{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Aro\\\\Desktop\\\\it-kam-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = \"auth/SET_USER_DATA\";\nlet initialState = {\n  usersId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return _objectSpread({}, state, {}, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: \"SET_USER_DATA\",\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let _response$data$data = response.data.data,\n        id = _response$data$data.id,\n        login = _response$data$data.login,\n        email = _response$data$data.email;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/Aro/Desktop/it-kam-master/src/redux/authReducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","usersId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","userId","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout"],"mappings":";AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,oBAAtB;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,aAAL;AACE,+BACKO,KADL,MAEKC,MAAM,CAACE,OAFZ;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD,CAVD;;AAYA,OAAO,MAAMI,eAAe,GAAG,CAACC,MAAD,EAAST,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAChEI,EAAAA,IAAI,EAAE,eAD0D;AAEhEC,EAAAA,OAAO,EAAE;AACPE,IAAAA,MADO;AAEPT,IAAAA,KAFO;AAGPC,IAAAA,KAHO;AAIPC,IAAAA;AAJO;AAFuD,CAAnC,CAAxB;AAUP,OAAO,MAAMQ,eAAe,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACrD,MAAIC,QAAQ,GAAG,MAAMjB,OAAO,CAACkB,EAAR,EAArB;;AACA,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAAA,8BACPH,QAAQ,CAACE,IAAT,CAAcA,IADP;AAAA,QAC5BE,EAD4B,uBAC5BA,EAD4B;AAAA,QACxBf,KADwB,uBACxBA,KADwB;AAAA,QACjBD,KADiB,uBACjBA,KADiB;AAElCW,IAAAA,QAAQ,CAACH,eAAe,CAACQ,EAAD,EAAKhB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACD;AACF,CANM;AAQP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAiC,MAAMP,QAAN,IAAkB;AACtE,MAAIC,QAAQ,GAAG,MAAMjB,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,CAArB;;AACA,MAAIN,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClCJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AAEA,QAAIS,OAAO,GACTP,QAAQ,CAACE,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GACIT,QAAQ,CAACE,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CADJ,GAEI,YAHN;AAIAT,IAAAA,QAAQ,CAACf,UAAU,CAAC,OAAD,EAAU;AAAE0B,MAAAA,MAAM,EAAEH;AAAV,KAAV,CAAX,CAAR;AACD;AACF,CAXM;AAaP,OAAO,MAAMI,MAAM,GAAG,MAAM,MAAMZ,QAAN,IAAkB;AAC5C,MAAIC,QAAQ,GAAG,MAAMjB,OAAO,CAAC4B,MAAR,EAArB;;AACA,MAAIX,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClCJ,IAAAA,QAAQ,CAACD,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACD;AACF,CALM;AAOP,eAAeP,WAAf","sourcesContent":["import { authAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"auth/SET_USER_DATA\";\r\n\r\nlet initialState = {\r\n  usersId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n  type: \"SET_USER_DATA\",\r\n  payload: {\r\n    userId,\r\n    email,\r\n    login,\r\n    isAuth\r\n  }\r\n});\r\n\r\nexport const getAuthUserData = () => async dispatch => {\r\n  let response = await authAPI.me();\r\n  if (response.data.resultCode === 0) {\r\n    let { id, login, email } = response.data.data;\r\n    dispatch(setAuthUserData(id, email, login, true));\r\n  }\r\n};\r\n\r\nexport const login = (email, password, rememberMe) => async dispatch => {\r\n  let response = await authAPI.login(email, password, rememberMe);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(getAuthUserData());\r\n\r\n    let message =\r\n      response.data.messages.length > 0\r\n        ? response.data.messages[0]\r\n        : \"Some error\";\r\n    dispatch(stopSubmit(\"login\", { _error: message }));\r\n  }\r\n};\r\n\r\nexport const logout = () => async dispatch => {\r\n  let response = await authAPI.logout();\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(getAuthUserData(null, null, null, false));\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n"]},"metadata":{},"sourceType":"module"}